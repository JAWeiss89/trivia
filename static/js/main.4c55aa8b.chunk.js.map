{"version":3,"sources":["helpers/shuffleArr.js","Question.js","Timer.js","Dashboard.js","Results.js","MessageBoard.js","helpers/randomChoice.js","TriviaGame.js","WelcomeScreen.js","App.js","reportWebVitals.js","index.js"],"names":["shuffleArr","arr","arrCopy","newArr","length","removedItem","splice","Math","floor","random","push","Question","question","increaseScore","revealAnswer","increaseAttempts","setMessage","answers","correct","incorrect","shuffledAnswers","checkIfCorrect","e","target","innerText","console","log","className","map","answer","role","onClick","Timer","questionsLeft","setTimeOutKey","setIntervalKey","useState","seconds","setSeconds","useEffect","intervalId","setInterval","timeOutId","setTimeout","clearInterval","clearTimeout","class","Dashboard","score","Results","name","MessageBoard","message","randomChoice","TriviaGame","setScore","attempts","setAttempts","questionsUsed","setQuestionsUsed","questions","currentQuestion","setCurrentQuestion","gameOver","setGameOver","timeOutKey","intervalKey","newQuestionFound","newQuestion","includes","getNewQuestion","WelcomeScreen","setName","setBeginGame","nameField","setNameField","autoComplete","onSubmit","preventDefault","type","placeholder","value","onChange","App","beginGame","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4c55aa8b.chunk.js","sourcesContent":["// given an array, shuffleArr returns a NEW arr with the same contents but in a random order.\n\nfunction shuffleArr(arr) {\n    // make a copy as to not affect original arr\n    const arrCopy = [...arr];\n    const newArr = [];\n    \n    while (arrCopy.length > 0) {\n        // we will remove a random item from the arrCopy and add it to newArr. After each iteration, arrCopy gets smaller\n        let removedItem = arrCopy.splice(Math.floor(Math.random()*arrCopy.length), 1);\n        newArr.push(removedItem[0]); \n    }\n    return newArr;\n}\n\nexport default shuffleArr;","import React from 'react';\nimport shuffleArr from './helpers/shuffleArr';\nimport './styles/Question.css'\n\nconst Question = ({question, increaseScore, increaseAttempts, revealAnswer, setMessage}) => {\n    const answers = [question.correct, question.incorrect[0], question.incorrect[1], question.incorrect[2]];\n    const shuffledAnswers = shuffleArr(answers);\n    const checkIfCorrect = (e) => {\n        if (e.target.innerText === question.correct) {\n            console.log(\"Correct!\")\n            setMessage(\"Correct!\")\n            increaseScore();\n            // increaseAttempts();\n            revealAnswer();\n        } else {\n\n            // increaseAttempts();\n            setMessage(`Not Correct :( - The correct answer is ${question.correct}`)\n            revealAnswer();\n        }\n    }\n    // console.log(\"Question Component Rendered\")\n\nreturn (\n    <div className=\"Question\">\n        <p>{question.question}</p>\n        <ul>\n            {shuffledAnswers.map(answer => {\n                return <li role=\"listitem\" onClick={checkIfCorrect} key={answer}>{answer}</li>\n            })}\n        </ul>\n\n    </div>\n)\n}\n\nexport default Question;","import React, { useState, useEffect } from \"react\";\nimport './styles/Timer.css'\n\nconst Timer = ({increaseAttempts, questionsLeft, revealAnswer, setMessage, answer, setTimeOutKey, setIntervalKey}) => {\n    let [seconds, setSeconds] = useState(10);\n  \n    useEffect(() => {\n      setSeconds(10);\n      console.log(\"Timer has started\")\n      const intervalId = setInterval(() => {\n          setSeconds(seconds => seconds - 1) // Begin timer at 10 seconds and subtract 1 each second.\n          \n      }, 1000)\n      setIntervalKey(intervalId);\n      const timeOutId = setTimeout(() => {          \n          clearInterval(intervalId)\n          console.log(\"Timer has been cleared after 10 secs\")\n        //   increaseAttempts();\n        setMessage(`The correct answer was ${answer}`)\n        revealAnswer();\n      }, 10000)\n      setTimeOutKey(timeOutId);\n      return () => {\n        console.log(\"Timer has been cleared after new question\")\n        clearTimeout(timeOutId);\n        clearInterval(intervalId);\n      }\n    }, [questionsLeft])  \n    return <p className={seconds < 4 ? \"timer warning\" : \"timer tandem\" }><i class=\"far fa-clock\"></i>{seconds}</p>\n}\n\nexport default Timer;","import React from 'react';\nimport Timer from './Timer';\nimport './styles/Dashboard.css';\n\nconst Dashboard = ({score, seconds, questionsLeft, increaseAttempts, revealAnswer, answer, setMessage, setTimeOutKey, setIntervalKey}) => {\n    return (\n        <div className=\"Dashboard\">\n            <div className=\"Dashboard-questionsLeft\">\n                <p>{questionsLeft} Questions Left</p>\n            </div>\n            <div className=\"Dashboard-timer\">\n                < Timer seconds={seconds} increaseAttempts={increaseAttempts} questionsLeft={questionsLeft} revealAnswer={revealAnswer} answer={answer} setMessage={setMessage} setTimeOutKey={setTimeOutKey} setIntervalKey={setIntervalKey}/>\n            </div>\n            <div className=\"Dashboard-score\">\n                <p>Score: {score}</p>\n            </div>\n\n        </div>\n    )\n}\n\nexport default Dashboard;","import React from 'react';\nimport './styles/Results.css'\n\nconst Results = ({score, name}) => {\n    return (\n        <div className=\"Results\">\n            <p className=\"Results-gameover\">game over</p>\n            <p className=\"Results-name\">Great game, <span className=\"tandem\">{name}</span>!</p>\n            <p className=\"Results-score\">Your score is {score}</p>\n\n        </div>\n    )\n}\n\nexport default Results;","import React from 'react';\nimport './styles/MessageBoard.css'\n\nconst MessageBoard = ({message}) => {\n    return (\n        <div className=\"MessageBoard\">\n            <p className=\"MessageBoard-message\">{message}</p>\n        </div>\n    )\n}\n\nexport default MessageBoard;","// given an array this function will return a random item from the array\n\nconst randomChoice = (arr) => {\n    // Generate a random integer from 0 to however long the array is -- this will serve as the index\n    const randomIndex = Math.floor(Math.random()*arr.length);\n    return arr[randomIndex];\n}\n\nexport default randomChoice;","import React, { useState } from 'react';\nimport Question from './Question';\nimport Dashboard from './Dashboard';\nimport Results from './Results';\nimport MessageBoard from './MessageBoard';\nimport questions from './helpers/Apprentice_TandemFor400_Data.json';\n// import questions from './helpers/sampleQuestions.json';\nimport randomChoice from './helpers/randomChoice';\nimport './styles/TriviaGame.css'\n\nconst TriviaGame = ({name}) => {\n    let [score, setScore] = useState(0);\n    let [attempts, setAttempts] = useState(0);\n    let [questionsUsed, setQuestionsUsed] = useState([]);\n    let [currentQuestion, setCurrentQuestion] = useState(randomChoice(questions));\n    let [gameOver, setGameOver] = useState(false);\n    let [message, setMessage] = useState(\"\");\n    let [timeOutKey, setTimeOutKey] = useState(0);\n    let [intervalKey, setIntervalKey] = useState(0);\n\n\n    const getNewQuestion = () => {\n        // first, current question gets added to list of questions that have been used already. \n        setQuestionsUsed(questionsUsed => [...questionsUsed, currentQuestion])\n        // sets new question and checks to make sure it's not a repeated one.\n        let newQuestionFound = false;\n        while (!newQuestionFound) {  // keep checking random questions until a question has been found that hasn't been used. \n            let newQuestion = randomChoice(questions);\n            if (!questionsUsed.includes(newQuestion)) { // if random question isn't one that has already been used,\n                setCurrentQuestion(newQuestion); // update the current question\n                newQuestionFound = true; // break out of while loop\n            }\n        }\n    }\n\n    const increaseScore = () => {\n        setScore(score => score + 10);\n    }\n    const increaseAttempts = () => {\n        if (attempts < 9 ) {\n            getNewQuestion();\n            setAttempts(attempts => attempts + 1);\n            setMessage(\"\")\n        }\n        else {\n            setGameOver(true);\n        }\n    }\n\n    const revealAnswer = () => {\n        setTimeout(increaseAttempts, 2000)\n        clearTimeout(timeOutKey);\n        clearInterval(intervalKey);\n    }\n\n\n    \n\n    return (\n        <div className=\"TriviaGame\">\n            { !gameOver \n            ? <div> \n            < Dashboard score={score} questionsLeft={10-attempts} revealAnswer={revealAnswer} increaseAttempts={increaseAttempts} answer={currentQuestion.correct} setMessage={setMessage} setTimeOutKey={setTimeOutKey} setIntervalKey={setIntervalKey}/>\n            < Question question={currentQuestion} increaseScore={increaseScore} increaseAttempts={increaseAttempts} setMessage={setMessage} revealAnswer={revealAnswer}/>\n            < MessageBoard message={message} />\n            </div>\n            : \n            < Results name={name} score={score} />\n            }\n        </div>\n  \n    )\n}\n\nexport default TriviaGame;","import React, { useState } from 'react';\nimport './styles/WelcomeScreen.css';\n\nconst WelcomeScreen = ({setName, setBeginGame}) => {\n    const [nameField, setNameField] = useState(\"\");\n    const handleChange = (e) => {\n        setNameField(e.target.value)\n    }\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (nameField) {\n            setName(nameField);\n            setBeginGame(true);\n        }\n\n    }\n    return (\n        \n        <div className=\"WelcomeScreen\">\n            <h1><span className=\"tandem\">tandem</span>trivia</h1>\n            <form autoComplete=\"off\" onSubmit={handleSubmit}>\n                <input type=\"text\" name=\"name\" placeholder=\"name\" value={nameField} onChange={handleChange}></input>\n                <button className={nameField ? \"active\":\"none\" }>start</button>\n            </form>\n        </div>\n    )\n}\n\nexport default WelcomeScreen;","import React, {useState} from 'react';\nimport TriviaGame from './TriviaGame';\nimport WelcomeScreen from './WelcomeScreen';\nimport './styles/App.css';\n\nfunction App() {\n  let [beginGame, setBeginGame] = useState(false);\n  let [name, setName] = useState(null);\n\n  return (\n    <div className=\"App\">\n      {beginGame \n      ? <>\n        <a href=\"/\"><h2><span className=\"tandem\">tandem</span>trivia</h2></a>\n        <TriviaGame name={name}/>\n        </>\n      : <WelcomeScreen setName={setName} setBeginGame={setBeginGame}/>\n      }\n      <p className=\"credits\">Designed & Developed by <a href=\"https://www.JorgeWeiss.com\">Jorge Weiss</a></p>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}